---
import { type CollectionEntry, getCollection } from 'astro:content';
import BlogPost from '../../layouts/BlogPost.astro';

export async function getStaticPaths() {
	const posts = await getCollection('blog');
	return posts.map((post) => ({
		params: { slug: post.slug },
		props: post,
	}));
}
type Props = CollectionEntry<'blog'>;

const post = Astro.props;
const { Content } = await post.render();
---

<BlogPost {...post.data}>
	<Content />
</BlogPost>

<script>
  // ブログ内のすべての画像に遅延読み込みを適用
  document.addEventListener('DOMContentLoaded', () => {
    const images = document.querySelectorAll('main .prose img');
    images.forEach((img, index) => {
      // 遅延読み込みと非同期デコードの設定
      if (index >= 2) {
        img.setAttribute('loading', 'lazy');
        img.setAttribute('decoding', 'async');
      }
      
      // _{width}x{height}.webp形式の画像に対してwidth, heightを設定
      const src = img.getAttribute('src');
      if (src) {
        const match = src.match(/_(\d+)x(\d+)\.webp$/);
        if (match) {
          const [, width, height] = match;
          img.setAttribute('width', width);
          img.setAttribute('height', height);
        }
      }
      
      // クリックイベントの追加
      img.addEventListener('click', () => {
        const rect = img.getBoundingClientRect();
        const scrollTop = window.scrollY || document.documentElement.scrollTop;
        const targetPosition = rect.top + scrollTop - 12; // 12pxのマージンを追加

        window.scrollTo({
          top: targetPosition,
          behavior: 'smooth'
        });
      });
    });
  });
</script>
