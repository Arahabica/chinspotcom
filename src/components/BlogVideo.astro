---
const { poster, url, width } = Astro.props;

const videoWidth = width ? width + 'px' : '100%';
---
<div class="blog-video-wrapper">
  <div class="video-container"
   style={{width: videoWidth, maxHeight: 'calc(100vh - 24px)'}}
   >
    <div class="progress-bar"></div>
    <video
      src={url}
      class="blog-video"
      preload="none"
      poster={poster}
    ></video>
    <div class="play-button">
      <svg
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 24 24"
        fill="white" width="48" height="48"
      >
        <path d="M8 5v14l11-7z"/>
      </svg>
    </div>
    <div class="mute-button">
      <svg
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 24 24"
        fill="white"
        width="24"
        height="24"
        class="volume-icon"
      >
        <path d="M3 9v6h4l5 5V4L7 9H3zm13.5 3c0-1.77-1.02-3.29-2.5-4.03v8.05c1.48-.73 2.5-2.25 2.5-4.02zM14 3.23v2.06c2.89.86 5 3.54 5 6.71s-2.11 5.85-5 6.71v2.06c4.01-.91 7-4.49 7-8.77s-2.99-7.86-7-8.77z"/>
      </svg>
      <svg
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 24 24"
        fill="white"
        width="24"
        height="24"
        class="mute-icon hidden"
      >
        <path d="M16.5 12c0-1.77-1.02-3.29-2.5-4.03v2.21l2.45 2.45c.03-.2.05-.41.05-.63zm2.5 0c0 .94-.2 1.82-.54 2.64l1.51 1.51C20.63 14.91 21 13.5 21 12c0-4.28-2.99-7.86-7-8.77v2.06c2.89.86 5 3.54 5 6.71zM4.27 3L3 4.27 7.73 9H3v6h4l5 5v-6.73l4.25 4.25c-.67.52-1.42.93-2.25 1.18v2.06c1.38-.31 2.63-.95 3.69-1.81L19.73 21 21 19.73l-9-9L4.27 3zM12 4L9.91 6.09 12 8.18V4z"/>
      </svg>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const isMobile = window.innerWidth <= 720;
    const videos = document
      .querySelectorAll('.blog-video') as NodeListOf<HTMLVideoElement>;
    const playButtons = document
      .querySelectorAll('.play-button') as NodeListOf<HTMLDivElement>;
    const progressBars = document
      .querySelectorAll('.progress-bar') as NodeListOf<HTMLDivElement>;

    // Create Intersection Observer
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        const video = entry.target as HTMLVideoElement;
        if (!entry.isIntersecting && !video.paused) {
          video.pause();
        }
      });
    }, { threshold: 0 });

    // Observe each video
    videos.forEach((video, index) => {
      observer.observe(video);

      const playButton = playButtons[index];
      const progressBar = progressBars[index];
      const videoContainer = video.closest('.video-container') as HTMLDivElement;
      const muteButton = video.parentElement?.querySelector('.mute-button') as HTMLDivElement;
      const volumeIcon = muteButton?.querySelector('.volume-icon') as SVGElement;
      const muteIcon = muteButton?.querySelector('.mute-icon') as SVGElement;

      // ミュートボタンのクリックイベント
      muteButton?.addEventListener('click', () => {
        video.muted = !video.muted;
        volumeIcon.classList.toggle('hidden');
        muteIcon.classList.toggle('hidden');
      });

      video.addEventListener('click', () => {
        if (video.paused) {
          startVideo(video);
        } else {
          stopVideo(video);
        }
      });

      video.addEventListener('play', () => {
        videoContainer.classList.add('playing');
      });

      video.addEventListener('pause', () => {
        videoContainer.classList.remove('playing');
      });

      video.addEventListener('timeupdate', () => {
        const progress = (video.currentTime / video.duration) * 100;
        progressBar.style.width = `${progress}%`;
      });
    });

    const startVideo = (video: HTMLVideoElement) => {
      // 他の動画を停止
      videos.forEach(otherVideo => {
        if (otherVideo !== video && !otherVideo.paused) {
          stopVideo(otherVideo);
        }
      });

      video.play();
      const container = video.closest('.video-container');
      if (container) {
        const rect = container.getBoundingClientRect();
        const marginTop = isMobile ? 0 : 12;
        const scrollTop = window.scrollY + rect.top - marginTop;
        window.scrollTo({
          top: scrollTop,
          behavior: 'smooth'
        });
      }
    };

    const stopVideo = (video: HTMLVideoElement) => {
      video.pause();
    };
  });
</script>

<style>
  .blog-video-wrapper {
    display: flex;
    justify-content: center;
  }

  .blog-video-wrapper .video-container {
    position: relative;
    display: inline-block;
  }
  .blog-video-wrapper video {
    width: 100%;
    height: 100%;
  }


  .progress-bar {
    position: absolute;
    top: 0;
    left: 0;
    width: 0;
    height: 3px;
    background-color: rgba(255, 255, 255, 0.8);
    z-index: 2;
    transition: width 0.1s linear;
  }

  .blog-video {
    display: block;
    height: auto;
    width: 100%;
    cursor: pointer;
  }

  .play-button {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background-color: rgba(0, 0, 0, 0.5);
    border-radius: 50%;
    width: 64px;
    height: 64px;
    display: flex;
    pointer-events: none;
    align-items: center;
    justify-content: center;
    transition: opacity 0.3s ease;
    cursor: pointer;
    opacity: 1;
  }
  .video-container.playing .play-button {
    opacity: 0;
  }


  .play-button:hover {
    background-color: rgba(0, 0, 0, 0.7);
  }

  .mute-button {
    position: absolute;
    bottom: 10px;
    right: 10px;
    background: rgba(0, 0, 0, 0.5);
    border-radius: 50%;
    padding: 8px;
    cursor: pointer;
    z-index: 2;
    opacity: 1;
    display: flex;;
  }

  .video-container.playing .mute-button {
    display: none;
  }

  .video-container.playing:hover .mute-button {
    display: flex;
  }

  .hidden {
    display: none;
  }
</style>
