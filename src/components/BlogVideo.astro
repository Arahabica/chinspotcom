---
const { poster, url, width } = Astro.props;

const videoWidth = width ? width + 'px' : '100%';
let posterWidth: number|undefined;
let posterHeight: number|undefined;

const [,widthStr, heightStr] = poster.match(/_(\d+)x(\d+)\.webp/);
if (widthStr && heightStr) {
  posterWidth = parseInt(widthStr);
  posterHeight = parseInt(heightStr);
}
---
    <video
      src={url}
      class="blog-video"
      preload="none"
      muted
      playsinline
      controls
      poster={poster}
      width={posterWidth}
      height={posterHeight}
    ></video>

<script>
  // document.addEventListener('DOMContentLoaded', () => {
  //   const isMobile = window.innerWidth <= 720;
  //   const videos = document
  //     .querySelectorAll('.blog-video') as NodeListOf<HTMLVideoElement>;
  //   const progressBars = document
  //     .querySelectorAll('.progress-bar') as NodeListOf<HTMLDivElement>;

  //   // Create Intersection Observer
  //   const observer = new IntersectionObserver((entries) => {
  //     entries.forEach(entry => {
  //       const video = entry.target as HTMLVideoElement;
  //       if (!entry.isIntersecting && !video.paused) {
  //         video.pause();
  //       }
  //     });
  //   }, { threshold: 0 });

  //   const updateMute = (muted: boolean) => {
  //     videos.forEach(video => video.muted = muted);
  //     const muteButtons = document
  //       .querySelectorAll('.mute-button') as NodeListOf<HTMLDivElement>;
  //     muteButtons.forEach(button => button.classList.toggle('muted', muted));
  //   };

  //   // Observe each video
  //   videos.forEach((video, index) => {
  //     observer.observe(video);

  //     const progressBar = progressBars[index];
  //     const videoContainer = video.closest('.video-container') as HTMLDivElement;
  //     const muteButton = video.parentElement?.querySelector('.mute-button') as HTMLDivElement;

  //     // ミュートボタンのクリックイベント
  //     muteButton?.addEventListener('click', () => {
  //       // video.muted = !video.muted;
  //       updateMute(!video.muted);
  //     });

  //     video.addEventListener('click', () => {
  //       if (video.paused) {
  //         startVideo(video);
  //       } else {
  //         stopVideo(video);
  //       }
  //     });

  //     video.addEventListener('play', () => {
  //       videoContainer.classList.add('playing');
  //     });

  //     video.addEventListener('pause', () => {
  //       videoContainer.classList.remove('playing');
  //     });

  //     video.addEventListener('timeupdate', () => {
  //       const progress = Math.floor((video.currentTime / video.duration) * 1000) / 10;
  //       progressBar.style.width = `${progress}%`;
  //     });
  //   });

  //   const startVideo = (video: HTMLVideoElement) => {
  //     // 他の動画を停止
  //     videos.forEach(otherVideo => {
  //       if (otherVideo !== video && !otherVideo.paused) {
  //         stopVideo(otherVideo);
  //       }
  //     });

  //     video.play();
  //     const container = video.closest('.video-container');
  //     if (container) {
  //       const rect = container.getBoundingClientRect();
  //       const marginTop = isMobile ? 0 : 12;
  //       const scrollTop = window.scrollY + rect.top - marginTop;
  //       window.scrollTo({
  //         top: scrollTop,
  //         behavior: 'smooth'
  //       });
  //     }
  //   };

  //   const stopVideo = async (video: HTMLVideoElement) => {
  //     try {
  //       await video.pause();
  //     } catch (e) {
  //       console.error(e);
  //     }
  //   };
  // });
</script>

<style>
  .blog-video-wrapper {
    display: flex;
    justify-content: center;
  }

  .blog-video-wrapper .video-container {
    position: relative;
    display: inline-block;
  }
  .blog-video-wrapper video {
    width: 100%;
    height: 100%;
  }


  .progress-bar {
    position: absolute;
    top: 0;
    left: 0;
    width: 0;
    height: 3px;
    background-color: rgba(255, 255, 255, 0.8);
    z-index: 2;
    transition: width 0.3s linear;
  }

  .blog-video {
    display: block;
    height: auto;
    width: 100%;
    cursor: pointer;
  }

  .play-button {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background-color: rgba(0, 0, 0, 0.5);
    border-radius: 50%;
    width: 64px;
    height: 64px;
    display: flex;
    pointer-events: none;
    align-items: center;
    justify-content: center;
    transition: opacity 0.3s ease;
    cursor: pointer;
    opacity: 1;
  }
  .video-container.playing .play-button {
    opacity: 0;
  }


  .play-button:hover {
    background-color: rgba(0, 0, 0, 0.7);
  }

  .mute-button {
    position: absolute;
    bottom: 20px;
    right: calc(50% - 24px);
    background: rgba(0, 0, 0, 0.5);
    border-radius: 50%;
    padding: 8px;
    cursor: pointer;
    z-index: 2;
    opacity: 1;
    display: flex;
  }
  .volume-icon {
    display: block;
  }
  .mute-button.muted .volume-icon {
    display: none;
  }
  .mute-icon {
    display: none;
  }
  .mute-button.muted .mute-icon {
    display: block;
  }

  .video-container.playing .mute-button {
    display: none;
  }
</style>
